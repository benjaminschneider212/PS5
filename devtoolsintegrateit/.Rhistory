integrateIt(c(4,5), c(4,5), c(4,5),"Simpson")
(integrateIt(c(4,5), c(4,5), c(4,5),"Simpson")
integrateIt(x=c(4,5), y=c(4,5), bounds=c(4,5), rule="Simpson")
setMethod(f="integrateIt",
definition=function(x,y,bounds=c(a,b),rule){
x<-as.matrix(x) #this is done for functionality
x<-t(x) #same
y<-as.matrix(y) #same
y<-t(y) #same
if (ncol(x)==ncol(y)){#ifr condition to make sure the function works
if (rule=="Trap"){
trapvec<-y*2 #setting up the doubled values
trapvec[1]<-y[1] #replace the first
trapvec[ncol(y)]<-y[ncol(y)] #replace the last
h<-(bounds[2]-bounds[1]+1)/ncol(x) #creates the h with the bounds, the plus 1 is to make the math work
trapoutput<-h/2*(trapvec) #setting up the series of numbers
x<-as.vector(x) #transfering the x and y output back to how it was entered
y<-as.vector(y)
return(new("Trapezoid", result=sum(trapoutput), x = x, y = y)) #create the output, notice the sum of trap output for all of the values
}
if (rule=="Simpson"){
simpvec<-y #Setting up the vector
for (i in 1:ncol(y)){
if((i %% 2) == 0){
simpvec[i]<-y[i]*4} #for loop mutiplying every ther value by 4
else {simpvec[i]<-y[i]*2}} #doing the rest by two
simpvec[1]<-y[1] #replace the first term
simpvec[ncol(y)]<-y[ncol(y)] #replace the last term
h<-(bounds[2]-bounds[1]+1)/ncol(x) #create the h agan
simpoutput<-h/3*(simpvec) #same thing but divided by 3
x<-as.vector(x) #transfering the x and y output back to how it was entered
y<-as.vector(y)
return(new("Simpson", result=sum(simpoutput), x = x, y = y))} #Create the output
else{return("Please select a valid rule")}} #errors thrown
else{return("make sure your x and y are of equal length")} #errors thrown
}
)
integrateIt(x=c(4,5), y=c(4,5), bounds=c(4,5), rule="Simpson")
print(c(4,5), c(4,5), c(4,5),"Trap")
library(devtools)
library(roxygen2)
setwd("/Users/benjaminschneider/Documents/GitHub/PS5/devtoolsintegrateit/")
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
Y<-c(39.32, 198.64, 175.47, 40.36, 17.66, 78.49, 48.04, 157.67, 11.29, 39.51,
23.23, 100.66, 31.52, 128.60, 169.41, 37.85, 62.44, 14.48, 37.85, 17.64)
K<-c(3.58, 18.23, 12.10, 15.13, 8.32, 19.90, 5.90, 17.60, 1.68, 12.57, 12.25,
17.19, 6.64, 13.57, 15.88, 4.78, 18.15, 18.56, 4.03, 18.85)
L<-c(39.07, 54.62, 34.08, 49.35, 48.96, 62.30, 44.00, 45.49, 68.26, 39.85, 41.73,
36.21, 59.94, 45.07, 41.55, 30.65, 31.54, 38.80, 68.64, 30.16)
lnY<-log(Y)
lnK<-log(K)
lnL<-log(L)
modelmat<-cbind(lnK,lnL)
modelmat<-cbind(1,modelmat)
y<-lnY
m<-lm(y~lnK+lnL)
beta<-as.matrix(m$coefficients)
ms<-summary(m)
se2 <- (t(y) %*% y - t(beta) %*% t(modelmat) %*% y) / (nrow(modelmat)-2-1)
L<-matrix(c(0,1,1),nrow=1)
c<-matrix(c(1),nrow=1)
fstat<-(t(L%*%beta - c)%*%solve(L%*%solve(crossprod(modelmat))%*%t(L))%*%(L%*%beta - c))/2*se2
critval<-qf(.95, df1=2, df2=20)
fstat>critval
Y<-c(39.32, 198.64, 175.47, 40.36, 17.66, 78.49, 48.04, 157.67, 11.29, 39.51,
23.23, 100.66, 31.52, 128.60, 169.41, 37.85, 62.44, 14.48, 37.85, 17.64)
K<-c(3.58, 18.23, 12.10, 15.13, 8.32, 19.90, 5.90, 17.60, 1.68, 12.57, 12.25,
17.19, 6.64, 13.57, 15.88, 4.78, 18.15, 18.56, 4.03, 18.85)
L<-c(39.07, 54.62, 34.08, 49.35, 48.96, 62.30, 44.00, 45.49, 68.26, 39.85, 41.73,
36.21, 59.94, 45.07, 41.55, 30.65, 31.54, 38.80, 68.64, 30.16)
Y<-log(Y)
K<-log(K)
L<-log(L)
modelmat<-cbind(K,L)
modelmat<-cbind(1,modelmat)
m<-lm(Y~K+L)
beta<-as.matrix(m$coefficients)
ms<-summary(m)
se2 <- (t(Y) %*% Y - t(beta) %*% t(modelmat) %*% Y) / (nrow(modelmat)-2-1)
L<-matrix(c(0,1,1),nrow=1)
c<-matrix(c(1),nrow=1)
fstat<-(t(L%*%beta - c)%*%solve(L%*%solve(crossprod(modelmat))%*%t(L))%*%(L%*%beta - c))/2*se2
critval<-qf(.95, df1=2, df2=20)
fstat>critval
setClass(Class="Trapezoid",
representation = representation(
result = "numeric", #class creation with all of the necessary parts
x="numeric",
y="numeric"
),
prototype = prototype(
result =  c(),
x= c(),
y= c())
)
setClass(Class="Simpson",
representation = representation(
result = "numeric", #class creation with all of the necessary parts
x="numeric",
y="numeric"
),
prototype = prototype(
result =  c(),
x= c(),
y= c())
)
setGeneric(name="integrateIt",
def=function(x, y, bounds, rule)
{standardGeneric("integrateIt")}
)
setMethod(f="integrateIt",
definition=function(x,y,bounds=c(a,b),rule){
x<-as.matrix(x) #this is done for functionality
x<-t(x) #same
y<-as.matrix(y) #same
y<-t(y) #same
if (ncol(x)==ncol(y)){#ifr condition to make sure the function works
if (rule=="Trap"){
trapvec<-y*2 #setting up the doubled values
trapvec[1]<-y[1] #replace the first
trapvec[ncol(y)]<-y[ncol(y)] #replace the last
h<-(bounds[2]-bounds[1]+1)/ncol(x) #creates the h with the bounds, the plus 1 is to make the math work
trapoutput<-h/2*(trapvec) #setting up the series of numbers
x<-as.vector(x) #transfering the x and y output back to how it was entered
y<-as.vector(y)
return(new("Trapezoid", result=sum(trapoutput), x = x, y = y)) #create the output, notice the sum of trap output for all of the values
}
if (rule=="Simpson"){
simpvec<-y #Setting up the vector
for (i in 1:ncol(y)){
if((i %% 2) == 0){
simpvec[i]<-y[i]*4} #for loop mutiplying every ther value by 4
else {simpvec[i]<-y[i]*2}} #doing the rest by two
simpvec[1]<-y[1] #replace the first term
simpvec[ncol(y)]<-y[ncol(y)] #replace the last term
h<-(bounds[2]-bounds[1]+1)/ncol(x) #create the h agan
simpoutput<-h/3*(simpvec) #same thing but divided by 3
x<-as.vector(x) #transfering the x and y output back to how it was entered
y<-as.vector(y)
return(new("Simpson", result=sum(simpoutput), x = x, y = y))} #Create the output
else{return("Please select a valid rule")}} #errors thrown
else{return("make sure your x and y are of equal length")} #errors thrown
}
)
setGeneric(name="print",
def=function(x, y, bounds, rule,...)
{standardGeneric("print")}
)
setMethod(f="print",
definition=function(x,y,bounds=c(a,b),rule, ...){
x<-as.matrix(x) #this is done for functionality
x<-t(x) #same
y<-as.matrix(y) #same
y<-t(y) #same
if (ncol(x)==ncol(y)){#ifr condition to make sure the function works
if (rule=="Trap"){
trapvec<-y*2 #setting up the doubled values
trapvec[1]<-y[1] #replace the first
trapvec[ncol(y)]<-y[ncol(y)] #replace the last
h<-(bounds[2]-bounds[1]+1)/ncol(x) #creates the h with the bounds, the plus 1 is to make the math work
trapoutput<-h/2*(trapvec) #setting up the series of numbers
return(result=sum(trapoutput))}#Create the output
if (rule=="Simpson"){
simpvec<-y #Setting up the vector
for (i in 1:ncol(y)){
if((i %% 2) == 0){
simpvec[i]<-y[i]*4} #for loop mutiplying every ther value by 4
else {simpvec[i]<-y[i]*2}} #doing the rest by two
simpvec[1]<-y[1] #replace the first term
simpvec[ncol(y)]<-y[ncol(y)] #replace the last term
h<-(bounds[2]-bounds[1]+1)/ncol(x) #create the h agan
simpoutput<-h/3*(simpvec) #same thing but divided by 3
return(result=sum(simpoutput))}#create the output
else{return("Please select a valid rule")}} #erros thrown
else{return("make sure your x and y are of equal length")} #errors thrown
}
)
setGeneric(name="tolTest",
def=function(fun, tolerance,rule, start,correct, ...)
{standardGeneric("tolTest")}
)
setMethod(f="tolTest",
definition=function(fun, tolerance,rule, startandend,correct, ...){
#startandend<-c(0,10)
#correct<-integrate(fun, startandend[1],startandend[2])
start<-startandend[1]
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
if (rule=="Simpson"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2] - startandend[1]) / n
x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
}
)
tolTest(fun=2*x ,tolerance=0.5,rule="Simpson",startandend=c(3,7),correct=integrate(fun, lower=5,upper=7))
fun=2*x
tolTest(fun=function(x)2*x ,tolerance=0.5,rule="Simpson",startandend=c(5,7),correct=integrate(fun, lower=5,upper=7))
tolTest(fun=function(x){2*x} ,tolerance=0.5,rule="Simpson",startandend=c(5,7),correct=integrate(fun, lower=5,upper=7))
setMethod(f="tolTest",
definition=function(fun, tolerance, rule, bounds, correct, ...){
begin<-bounds[1]
if (rule=="Trap"){
repeat{
n<-begin
h <- (bounds[2]-bounds[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(bounds[1]) + 2 * sum(fun(xj)) + fun(bounds[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)}}
if (rule=="Simpson"){
repeat {
n<-begin
h <- (bounds[2] - bounds[1]) / n
x<- seq.int(bounds[1], bounds[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)}}})
tolTest(fun=function(x){2*x}, tolerance=0.5, rule="Simpson", startandend=c(5,7), correct=integrate(fun, lower=5,upper=7))
tolTest(function(x){2*x}, tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
lit<-function(x){
y<-x^2
return(y)
}
tolTest(lit, tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
tolTest(fun=lit, tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
lit<-function(x=NULL){
y<-x^2
return(y)
}
setMethod(f="tolTest",
definition=function(fun, tolerance, rule, bounds, correct, ...){
begin<-bounds[1]
if (rule=="Trap"){
repeat{
n<-begin
h <- (bounds[2]-bounds[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(bounds[1]) + 2 * sum(fun(xj)) + fun(bounds[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)}}
if (rule=="Simpson"){
repeat {
n<-begin
h <- (bounds[2] - bounds[1]) / n
x<- seq.int(bounds[1], bounds[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)}}})
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
tolTest(fun=lit(x), tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
tolTest(fun=lit( ), tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
lit<-function(x){
y<-x^2
return(y)
}
setMethod(f="tolTest",
definition=function(fun, tolerance, rule, bounds, correct, ...){
begin<-bounds[1]
if (rule=="Trap"){
repeat{
n<-begin
h <- (bounds[2]-bounds[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(bounds[1]) + 2 * sum(fun(xj)) + fun(bounds[2]))
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}
if (rule=="Simpson"){
repeat {
n<-begin
h <- (bounds[2] - bounds[1]) / n
x<- seq.int(bounds[1], bounds[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}})
debug(tolTest)
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
lit<-function(x=NULL){
y<-x^2
return(y)
}
setMethod(f="tolTest",
definition=function(fun, tolerance, rule, bounds, correct, ...){
begin<-bounds[1]
if (rule=="Trap"){
repeat{
n<-begin
h <- (bounds[2]-bounds[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(bounds[1]) + 2 * sum(fun(xj)) + fun(bounds[2]))
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}
if (rule=="Simpson"){
repeat {
n<-begin
h <- (bounds[2] - bounds[1]) / n
x<- seq.int(bounds[1], bounds[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}})
debug(tolTest)
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
lit<-function(x){
y<-x^2
return(y)
}
setMethod(f="tolTest",
definition=function(fun, tolerance, rule, bounds, correct, ...){
begin<-bounds[1]
if (rule=="Trap"){
repeat{
n<-begin
h <- (bounds[2]-bounds[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(bounds[1]) + 2 * sum(fun(xj)) + fun(bounds[2]))
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}
if (rule=="Simpson"){
repeat {
n<-begin
h <- (bounds[2] - bounds[1]) / n
x<- seq.int(bounds[1], bounds[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}})
debug(tolTest)
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", bounds=c(5,7), correct=integrate(fun, lower=5,upper=7))
lit<-function(x){
y<-x^2
return(y)
}
setMethod(f="tolTest",
definition=function(fun, tolerance, rule, start, correct, ...){
begin<-start[1]
if (rule=="Trap"){
repeat{
n<-begin
h <- (start[2]-start[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(start[1]) + 2 * sum(fun(xj)) + fun(start[2]))
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}
if (rule=="Simpson"){
repeat {
n<-begin
h <- (start[2] - start[1]) / n
x<- seq.int(start[1], start[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}})
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", start=c(5,7), correct=integrate(fun, lower=5,upper=7))
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", start=c(5,7), correct=integrate(fun, lower=5,upper=7))
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", start=c(5,7), correct=integrate(lit(), lower=5,upper=7))
tolTest(fun=lit(), tolerance=0.5, rule="Simpson", start=c(5,7), correct=integrate(lit(x), lower=5,upper=7))
?integrate
integrate(lit(x), lower=5,upper=7)
integrate(lit(), lower=5,upper=7)
integrand <- function(x) {1/((x+1)*sqrt(x))}
tolTest(fun=integrand, tolerance=0.5, rule="Simpson", start=c(5,7), correct=integrate(integrand, lower=5,upper=7))
setMethod(f="tolTest",
definition=function(fun, tolerance, rule, start, correct, ...){
begin<-start[1]
if (rule=="Trap"){
repeat{
n<-begin
h <- (start[2]-start[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(start[1]) + 2 * sum(fun(xj)) + fun(start[2]))
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (trap < upper.tolerance & trap > lower.tolerance) break
return(n)}}
if (rule=="Simpson"){
repeat {
n<-begin
h <- (start[2] - start[1]) / n
x<- seq.int(start[1], start[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
lower.tolerance<-correct$value-as.numeric(tolerance)
upper.tolerance<-correct$value+as.numeric(tolerance)
if (sim < upper.tolerance & sim > lower.tolerance) break
return(n)}}})
tolTest(fun=integrand, tolerance=0.5, rule="Simpson", start=c(5,7), correct=integrate(integrand, lower=5,upper=7))
